{"version":3,"sources":["../src/config.es6"],"names":["debug","require","process","fs","path","yaml","_","ConfigError","ExtendedError","module","exports","env","NODE_ENV","options","label","file","resolve","join","__dirname","validate","transform","loadFile","file_path","config","err","load","readFileSync","logger","error","key","get","_config","value","set","constructor","productionLikeEnv","testEnv","conf"],"mappings":"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","file":"config.js","sourcesContent":["// # Config\n\n// A place to store config\n\n// Meant to be extended by your app\n\nconst debug = require('debug')('dply::config')\nconst process = require('process')\nconst fs = require('fs')\nconst path = require('path')\nconst yaml = require('js-yaml')\nconst _ = require('lodash')\n\nclass ConfigError extends require('deployable-errors').ExtendedError {}\n\n\n// ## class Config\n\n// `Config.instance` - Get the default config instance\n// `Config.createInstance` - Create a named Config instance\n// `Config.getInstance` - Get a named Config instance\n\nmodule.exports = class Config {\n\n  // Are we in a production like environment\n  static productionLikeEnv() {\n    switch(process.env.NODE_ENV){\n      case 'production':\n      case 'staging':\n      case 'load':\n      case 'testproduction':\n        return true\n      case 'development':\n      case 'test':\n      default: \n        return false\n    }\n  }\n\n  static testEnv() {\n    switch(process.env.NODE_ENV){\n      case 'test':\n      case 'testproduction':\n        return true\n      default: \n        return false\n    }\n  }\n  \n  // ### Instance\n\n  constructor ( options = {} ) {\n\n    // A label for this environment\n    this.label = options.label || process.env.NODE_ENV ||  'production'\n\n    // A File, normally just the label\n    this.file = options.file || `${this.label}.yml`\n  \n    // A path, where you store config files\n    this.path = options.path || path.resolve( path.join(__dirname, '..', 'config') )\n\n    // A validation function, for reading config\n    this.validate = options.validate\n\n    // A tranform function, for reading and writing config\n    this.transform = options.transform\n\n    this.loadFile()\n\n  }\n\n  loadFile () {\n    let file_path = path.join( this.path, this.file )\n    let config = {}\n    try {\n      config = require( file_path )\n      debug('required json from file',file_path)\n    } catch (err) {\n      try { \n        config = yaml.load( fs.readFileSync(file_path, 'utf8') )\n        debug('loaded yaml from file',file_path)\n\n      } catch (err) {\n        logger.error(err)\n        throw new ConfigError(`Can't load config - ${file_path}`)\n      }\n    }\n    debug('read config', file_path, config)\n    return this.config = config\n  }\n\n  // Get a config key\n  get (key) {\n    debug('get %s %s', this.label, key)\n    return _.get(this._config, key)\n  }\n\n  // Set a config key\n  set (key, value) {\n    debug('set %s %s', this.label, key, value)\n    return _.set(this._config, key)\n  }\n\n  get config () {\n    return this._config\n  }\n  set config (conf) {\n    // Validation\n    this._config = conf\n  }\n\n  productionLikeEnv() {\n    this.constructor.productionLikeEnv()\n  }\n\n  testEnv() {\n    this.constructor.testEnv()\n  }\n\n\n}\n\nmodule.exports.ConfigError = ConfigError\n"]}